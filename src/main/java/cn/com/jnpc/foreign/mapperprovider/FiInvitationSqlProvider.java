package cn.com.jnpc.foreign.mapperprovider;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.jdbc.SQL;

import cn.com.jnpc.foreign.model.FiInvitationExample;
import cn.com.jnpc.foreign.model.FiInvitationExample.Criteria;
import cn.com.jnpc.foreign.model.FiInvitationExample.Criterion;
import cn.com.jnpc.foreign.po.FiInvitation;
import cn.com.jnpc.foreign.vo.PageMybatis;

public class FiInvitationSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FI_INVITATION
     *
     * @mbggenerated Sun Sep 22 22:28:01 CST 2013
     */
    public String countByExample(FiInvitationExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("FI_INVITATION");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FI_INVITATION
     *
     * @mbggenerated Sun Sep 22 22:28:01 CST 2013
     */
    public String deleteByExample(FiInvitationExample example) {
        BEGIN();
        DELETE_FROM("FI_INVITATION");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FI_INVITATION
     *
     * @mbggenerated Sun Sep 22 22:28:01 CST 2013
     */
    public String insertSelective(FiInvitation record) {
        BEGIN();
        INSERT_INTO("FI_INVITATION");
        
        if (record.getId() != null) {
            VALUES("ID", "#{id,jdbcType=DECIMAL}");
        }
        
        if (record.getInvitationId() != null) {
            VALUES("INVITATION_ID", "#{invitationId,jdbcType=VARCHAR}");
        }
        
        if (record.getFkAttachmentId() != null) {
            VALUES("FK_ATTACHMENT_ID", "#{fkAttachmentId,jdbcType=VARCHAR}");
        }
        
        if (record.getIsUse() != null) {
            VALUES("IS_USE", "#{isUse,jdbcType=DECIMAL}");
        }
        
        if (record.getStayTime() != null) {
            VALUES("STAY_TIME", "#{stayTime,jdbcType=VARCHAR}");
        }
        
        if (record.getGobackTimes() != null) {
            VALUES("GOBACK_TIMES", "#{gobackTimes,jdbcType=VARCHAR}");
        }
        
        if (record.getArrivedDate() != null) {
            VALUES("ARRIVED_DATE", "#{arrivedDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getLeavingDate() != null) {
            VALUES("LEAVING_DATE", "#{leavingDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getStatus() != null) {
            VALUES("STATUS", "#{status,jdbcType=DECIMAL}");
        }
        
        if (record.getCreateDate() != null) {
            VALUES("CREATE_DATE", "#{createDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getEditDate() != null) {
            VALUES("EDIT_DATE", "#{editDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateUser() != null) {
            VALUES("CREATE_USER", "#{createUser,jdbcType=VARCHAR}");
        }
        
        if (record.getEditUser() != null) {
            VALUES("EDIT_USER", "#{editUser,jdbcType=VARCHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FI_INVITATION
     *
     * @mbggenerated Sun Sep 22 22:28:01 CST 2013
     */
    public String selectByExample(FiInvitationExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("ID");
        } else {
            SELECT("ID");
        }
        SELECT("INVITATION_ID");
        SELECT("FK_ATTACHMENT_ID");
        SELECT("IS_USE");
        SELECT("STAY_TIME");
        SELECT("GOBACK_TIMES");
        SELECT("ARRIVED_DATE");
        SELECT("LEAVING_DATE");
        SELECT("STATUS");
        SELECT("CREATE_DATE");
        SELECT("EDIT_DATE");
        SELECT("CREATE_USER");
        SELECT("EDIT_USER");
        FROM("FI_INVITATION");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        return SQL();
    }

    
    public String selectByPage(PageMybatis page){
	BEGIN();
	//select t2.* from (select rownum r,t1.* from fi_foreign t1 where rownum < 2) t2 where t2.r > 0;
	SELECT("t2.ID");
	SELECT("t2.INVITATION_ID");
        SELECT("t2.FK_ATTACHMENT_ID");
        SELECT("t2.IS_USE");
        SELECT("t2.STAY_TIME");
        SELECT("t2.GOBACK_TIMES");
        SELECT("t2.ARRIVED_DATE");
        SELECT("t2.LEAVING_DATE");
        SELECT("t2.STATUS");
        SELECT("t2.CREATE_DATE");
        SELECT("t2.EDIT_DATE");
        SELECT("t2.CREATE_USER");
        SELECT("t2.EDIT_USER");
        // t1.* from FI_INVITATION t1 where 
        FROM("( select rownum r,"+page.getQuerysql()+" and rownum <"+page.getNextsize()+" ) t2");
        WHERE("t2.r > "+ page.getNowsize());
        //System.out.println(SQL());
	return SQL();
    }
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FI_INVITATION
     *
     * @mbggenerated Sun Sep 22 22:28:01 CST 2013
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        FiInvitation record = (FiInvitation) parameter.get("record");
        FiInvitationExample example = (FiInvitationExample) parameter.get("example");
        
        BEGIN();
        UPDATE("FI_INVITATION");
        
        if (record.getId() != null) {
            SET("ID = #{record.id,jdbcType=DECIMAL}");
        }
        
        if (record.getInvitationId() != null) {
            SET("INVITATION_ID = #{record.invitationId,jdbcType=VARCHAR}");
        }
        
        if (record.getFkAttachmentId() != null) {
            SET("FK_ATTACHMENT_ID = #{record.fkAttachmentId,jdbcType=VARCHAR}");
        }
        
        if (record.getIsUse() != null) {
            SET("IS_USE = #{record.isUse,jdbcType=DECIMAL}");
        }
        
        if (record.getStayTime() != null) {
            SET("STAY_TIME = #{record.stayTime,jdbcType=VARCHAR}");
        }
        
        if (record.getGobackTimes() != null) {
            SET("GOBACK_TIMES = #{record.gobackTimes,jdbcType=VARCHAR}");
        }
        
        if (record.getArrivedDate() != null) {
            SET("ARRIVED_DATE = #{record.arrivedDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getLeavingDate() != null) {
            SET("LEAVING_DATE = #{record.leavingDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getStatus() != null) {
            SET("STATUS = #{record.status,jdbcType=DECIMAL}");
        }
        
        if (record.getCreateDate() != null) {
            SET("CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getEditDate() != null) {
            SET("EDIT_DATE = #{record.editDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateUser() != null) {
            SET("CREATE_USER = #{record.createUser,jdbcType=VARCHAR}");
        }
        
        if (record.getEditUser() != null) {
            SET("EDIT_USER = #{record.editUser,jdbcType=VARCHAR}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FI_INVITATION
     *
     * @mbggenerated Sun Sep 22 22:28:01 CST 2013
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("FI_INVITATION");
        
        SET("ID = #{record.id,jdbcType=DECIMAL}");
        SET("INVITATION_ID = #{record.invitationId,jdbcType=VARCHAR}");
        SET("FK_ATTACHMENT_ID = #{record.fkAttachmentId,jdbcType=VARCHAR}");
        SET("IS_USE = #{record.isUse,jdbcType=DECIMAL}");
        SET("STAY_TIME = #{record.stayTime,jdbcType=VARCHAR}");
        SET("GOBACK_TIMES = #{record.gobackTimes,jdbcType=VARCHAR}");
        SET("ARRIVED_DATE = #{record.arrivedDate,jdbcType=TIMESTAMP}");
        SET("LEAVING_DATE = #{record.leavingDate,jdbcType=TIMESTAMP}");
        SET("STATUS = #{record.status,jdbcType=DECIMAL}");
        SET("CREATE_DATE = #{record.createDate,jdbcType=TIMESTAMP}");
        SET("EDIT_DATE = #{record.editDate,jdbcType=TIMESTAMP}");
        SET("CREATE_USER = #{record.createUser,jdbcType=VARCHAR}");
        SET("EDIT_USER = #{record.editUser,jdbcType=VARCHAR}");
        
        FiInvitationExample example = (FiInvitationExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FI_INVITATION
     *
     * @mbggenerated Sun Sep 22 22:28:01 CST 2013
     */
    public String updateByPrimaryKeySelective(FiInvitation record) {
        BEGIN();
        UPDATE("FI_INVITATION");
        
        if (record.getInvitationId() != null) {
            SET("INVITATION_ID = #{invitationId,jdbcType=VARCHAR}");
        }
        
        if (record.getFkAttachmentId() != null) {
            SET("FK_ATTACHMENT_ID = #{fkAttachmentId,jdbcType=VARCHAR}");
        }
        
        if (record.getIsUse() != null) {
            SET("IS_USE = #{isUse,jdbcType=DECIMAL}");
        }
        
        if (record.getStayTime() != null) {
            SET("STAY_TIME = #{stayTime,jdbcType=VARCHAR}");
        }
        
        if (record.getGobackTimes() != null) {
            SET("GOBACK_TIMES = #{gobackTimes,jdbcType=VARCHAR}");
        }
        
        if (record.getArrivedDate() != null) {
            SET("ARRIVED_DATE = #{arrivedDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getLeavingDate() != null) {
            SET("LEAVING_DATE = #{leavingDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getStatus() != null) {
            SET("STATUS = #{status,jdbcType=DECIMAL}");
        }
        
        if (record.getCreateDate() != null) {
            SET("CREATE_DATE = #{createDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getEditDate() != null) {
            SET("EDIT_DATE = #{editDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateUser() != null) {
            SET("CREATE_USER = #{createUser,jdbcType=VARCHAR}");
        }
        
        if (record.getEditUser() != null) {
            SET("EDIT_USER = #{editUser,jdbcType=VARCHAR}");
        }
        
        WHERE("ID = #{id,jdbcType=DECIMAL}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FI_INVITATION
     *
     * @mbggenerated Sun Sep 22 22:28:01 CST 2013
     */
    protected void applyWhere(FiInvitationExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}